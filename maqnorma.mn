// limpa variável
operation clear(A){
 1: if zero A then goto 0 else goto 2
 2: do dec A goto 1
}

// A += B; B := 0 (soma destrutiva)
operation soma_(A,B) {
  1: if zero B then goto 0 else goto 2
  2: do dec B goto 3
  3: do inc A goto 1
}

// A+=B (soma não-destrutiva)
operation soma(A,B,C){
  1: if zero B then goto 5 else goto 2
  2: do dec B goto 3
  3: do inc A goto 4
  4: do inc C goto 1
  5: if zero C then goto 0 else goto 6
  6: do dec C goto 7
  7: do inc B goto 5
}

// A:=B usando C (atribuição não-destrutiva)
operation load(A,B,C){
  1: do clear(A) goto 2
  2: do soma(A,B,C) goto 0
}

operation load_(A,B) {
  1: do clear(A) goto 2
  2: do soma_(A,B) goto 0
}

operation load2_(A,B,C) {
  1: if zero C then goto 0 else goto 2
  2: do dec C goto 3
  3: do inc A goto 4
  4: do inc B goto 1
}

operation subtrai(A,B,C) {
  1: if zero B then goto fim_loop else goto 2
  2: do dec B goto 3
  3: do dec A goto 4
  4: do inc C goto 1
  fim_loop: do soma_(B,C) goto 0
}

test lt(A,B,C,D) {
  1: do load(C,B,D) goto 2
  2: do subtrai(C,A,D) goto 3
  3: if zero C then goto false else goto limpar
  limpar: do clear(C) goto true
}

test le(A,B,C,D,E) {
  1: do load(C,A,E) goto 2
  2: do load(D,B,E) goto 3

  3: if zero C then goto fim_true else goto 4
  4: if zero D then goto fim_false else goto 5
  5: do dec C goto 6
  6: do dec D goto 3

  fim_true: do clear(D) goto true
  fim_false: do clear(C) goto false
}

operation multiplica(A,B,C,D,E) {
  caso_zero: if zero B then goto caso_zero_1 else goto 1
  caso_zero_1: do clear(A) goto 0

  // load(C,A)
  1: do soma_(C,A) goto 2
  2: do load(D,B,E) goto loop

  loop: if zero D then goto fim else goto loop_1
  loop_1: do soma(A,C,E) goto loop_2
  loop_2: do dec D goto loop

  fim: do clear(C) goto 0
}

operation mod(A,B,C,D,E) {
  1: if zero B then goto 2 else goto loop
  2: do clear(A) goto 0
  loop: if le(B,A,C,D,E) then goto loop_1 else goto 0
  loop_1: do subtrai(A,B,D) goto loop
}

operation div(A,B,C,D,E,F) {
  1: if zero B then goto 2 else goto 3
  2: do clear(A) goto 0
  //load(C,A)
  3: do soma_(C,A) goto loop
  loop: if le(B,C,D,E,F) then goto loop_1 else goto fim_loop
  loop_1: do subtrai(C,B,D) goto loop_2
  loop_2: do inc A goto loop
  fim_loop: do clear(C) goto 0
}

operation div_ceil(A,B,C,D) {
  1: if zero B then goto 2 else goto 3
  2: do clear(A) goto 0
  //load(C,A), se C for zero
  3: do soma_(C,A) goto loop
  loop: if zero C then goto 0 else goto loop_1
  loop_1: do subtrai(C,B,D) goto loop_2
  loop_2: do inc A goto loop
}

operation div_2_ceil(A,B) {
  //load_(B,A), se B for zero
  1: do soma_(B,A) goto loop
  loop: if zero B then goto 0 else goto loop_1
  loop_1: do sub B 2 goto loop_2
  loop_2: do inc A goto loop
}

operation div_2(A,B,Rem) {
  pre_loop: do load2_(B,Rem,A) goto loop

  loop: if zero B then goto 0 else goto loop_1
  loop_1: do sub B 1 goto loop_2

  loop_2: if zero B then goto 0 else goto loop_3
  loop_3: do sub B 1 goto loop_4
  loop_4: do sub Rem 2 goto loop_5
  loop_5: do inc A goto loop
}

operation mult_2(A,B) {
  //load_(B,A), se B for zero
  1: do soma_(B,A) goto loop
  loop: if zero B then goto 0 else goto loop_1
  loop_1: do dec B goto loop_2
  loop_2: do add A 2 goto loop
}

//A=A*(2**(2**0))=A*2
operation times_2_2_0(A,B) {
  1: do soma_(B,A) goto 2
  2: if zero B then goto 0 else goto 3
  3: do dec B goto 4
  4: do add A 2 goto 2
}

//A=A*(2**(2**1))=A*4
operation times_2_2_1(A,B) {
  1: do soma_(B,A) goto 2
  2: if zero B then goto 0 else goto 3
  3: do dec B goto 4
  4: do add A 4 goto 2
}

//A=A*(2**(2**2))=A*16
operation times_2_2_2(A,B) {
  1: do soma_(B,A) goto 2
  2: if zero B then goto 0 else goto 3
  3: do dec B goto 4
  4: do add A 16 goto 2
}

//A=A*(2**(2**3))=A*256
operation times_2_2_3(A,B) {
  1: do soma_(B,A) goto 2
  2: if zero B then goto 0 else goto 3
  3: do dec B goto 4
  4: do add A 256 goto 2
}

//A=A*(2**(2**4))=A*65536
operation times_2_2_4(A,B) {
  1: do soma_(B,A) goto 2
  2: if zero B then goto 0 else goto 3
  3: do dec B goto 4
  4: do add A 65536 goto 2
}
//Y=Y*((2**(2**4))**A)
operation y_times_2_2_4(A,B,Y) {
  2: if zero A then goto 0 else goto 3
  3: do times_2_2_4(Y,B) goto 4
  4: do dec A goto 2
}

test is_odd_lt2(A) {
  1: if cmp A 1 then goto true else goto false
}

test is_odd_lt4(A) {
  1: if is_odd_lt2(A) then goto true else goto 2
  2: if cmp A 3 then goto true else goto false
}

test is_odd_lt8(A) {
  1: if is_odd_lt4(A) then goto true else goto 2
  2: if cmp A 5 then goto true else goto 3
  3: if cmp A 7 then goto true else goto false
}

test is_odd_lt16(A) {
  1: if is_odd_lt8(A) then goto true else goto 2
  2: if cmp A 9 then goto true else goto 3
  3: if cmp A 11 then goto true else goto 4
  4: if cmp A 13 then goto true else goto 5
  5: if cmp A 15 then goto true else goto false
}
test is_odd_lt32(A) {
  1: if is_odd_lt16(A) then goto true else goto 2
  2: if cmp A 17 then goto true else goto 3
  3: if cmp A 19 then goto true else goto 4
  4: if cmp A 21 then goto true else goto 5
  5: if cmp A 23 then goto true else goto 6
  6: if cmp A 25 then goto true else goto 7
  7: if cmp A 27 then goto true else goto 8
  8: if cmp A 29 then goto true else goto 9
  9: if cmp A 31 then goto true else goto false
}

operation times_fast_two_raised(A,B,C,D,Y) {
  pre: do load(B,A,C) goto 2_0

  2_0: do div_2(B,C,D) goto 2_0_1
  2_0_1: if zero D then goto after_2_0 else goto 2_0_2
  2_0_2: do times_2_2_0(Y,C) goto 2_0_3
  2_0_3: do clear(D) goto after_2_0
  after_2_0: if zero B then goto fim else goto 2_1

  2_1: do div_2(B,C,D) goto 2_1_1
  2_1_1: if zero D then goto after_2_1 else goto 2_1_2
  2_1_2: do times_2_2_1(Y,C) goto 2_1_3
  2_1_3: do clear(D) goto after_2_1
  after_2_1: if zero B then goto fim else goto 2_2

  2_2: do div_2(B,C,D) goto 2_2_1
  2_2_1: if zero D then goto after_2_2 else goto 2_2_2
  2_2_2: do times_2_2_2(Y,C) goto 2_2_3
  2_2_3: do clear(D) goto after_2_2
  after_2_2: if zero B then goto fim else goto 2_3

  2_3: do div_2(B,C,D) goto 2_3_1
  2_3_1: if zero D then goto after_2_3 else goto 2_3_2
  2_3_2: do times_2_2_3(Y,C) goto 2_3_3
  2_3_3: do clear(D) goto after_2_3
  after_2_3: if zero B then goto fim else goto 2_4

  2_4: do y_times_2_2_4(B,C,Y) goto fim
}

operation fast_two_raised(A,B,C,D,Y) {
  1: do inc Y goto 2
  2: do times_fast_two_raised(A,B,C,D,Y) goto 0
}

operation two_raised_x_div_2_ceil(A,Y,B,C,D,E) {
  1: do clear(Y) goto 2
  2: do load(B,A,Y) goto 3
  3: do div_2_ceil(B,Y) goto 4
  4: do fast_two_raised(B,C,D,E,Y) goto 0
}

operation div_4(A,B,Rem) {
  pre_loop: do load2_(B,Rem,A) goto loop

  loop: if zero B then goto 0 else goto loop_1
  loop_1: do sub B 3 goto loop_2

  loop_2: if zero B then goto 0 else goto loop_3
  loop_3: do sub B 1 goto loop_4
  loop_4: do sub Rem 4 goto loop_5
  loop_5: do inc A goto loop
}

operation div_8(A,B,Rem) {
  pre_loop: do load2_(B,Rem,A) goto loop

  loop: if zero B then goto 0 else goto loop_1
  loop_1: do sub B 7 goto loop_2

  loop_2: if zero B then goto 0 else goto loop_3
  loop_3: do sub B 1 goto loop_4
  loop_4: do sub Rem 8 goto loop_5
  loop_5: do inc A goto loop
}

operation div_16(A,B,Rem) {
  pre_loop: do load2_(B,Rem,A) goto loop

  loop: if zero B then goto 0 else goto loop_1
  loop_1: do sub B 15 goto loop_2

  loop_2: if zero B then goto 0 else goto loop_3
  loop_3: do sub B 1 goto loop_4
  loop_4: do sub Rem 16 goto loop_5
  loop_5: do inc A goto loop
}

operation div_32(A,B,Rem) {
  pre_loop: do load2_(B,Rem,A) goto loop

  loop: if zero B then goto 0 else goto loop_1
  loop_1: do sub B 31 goto loop_2

  loop_2: if zero B then goto 0 else goto loop_3
  loop_3: do sub B 1 goto loop_4
  loop_4: do sub Rem 32 goto loop_5
  loop_5: do inc A goto loop
}

operation fast_div_two_raised(A,B,C,Y) {
    2: if zero A then goto fim else goto 2_1
  2_1: do div_2(A,B,C) goto 2_2
  2_2: if zero C then goto 2_3 else goto fim
  2_3: do inc Y goto 2

  fim: do times_2_2_0(A,B) goto fim_1
  fim_1: do soma_(A,C) goto 0
}

test divBy(A,B,C,D,E,F) {
  1: do load(C,A,D) goto 2
  2: do mod(C,B,D,E,F) goto 3
  3: if zero C then goto true else goto 4
  4: do clear(C) goto false
}

test le_1_(A) {
  1: do dec A goto 2
  2: if zero A then goto true else goto 3
  3: do inc A goto false
}

test primo(A,B,C,D,E,F,G) {
  1: do load(B,A,D) goto 2
  2: do add C 2 goto 3
  3: do div(B,C,D,E,F,G) goto 4
  4: do clear(C) goto loop

  loop: if le_1_(B) then goto fim_true else goto loop_1
  loop_1: if divBy(A,B,C,D,E,F) then goto fim_false else goto loop_2
  loop_2: do sub B 1 goto loop

  fim_true: do clear(B) goto true
  fim_false: do clear(B) goto false
}

//A=A!
operation fatorial(A,B,C,D,E) {
  fat_0: if zero A then goto fat_0_1 else goto 1
  fat_0_1: do inc A goto 0

  1: do load(B,A,C) goto 2

  2: do dec B goto 3
  3: if zero B then goto 0 else goto 4
  4: do multiplica(A,B,C,D,E) goto 2
}

//A = A*(A-1)*...*(B+1)
operation multiplica_de_A_a_B(A,B,C,D,E,F,G) {
  1: do load(C,A,E) goto 2
  2: do load(D,A,E) goto 3

  3: do subtrai(C,B,E) goto 4

  4: do dec C goto 5
  5: if zero C then goto fim else goto 6
  6: do dec D goto 7
  7: do multiplica(A,D,E,F,G) goto 4

  fim: do clear(D) goto 0
}

//cheat, muito feio, deselegante, horrível
operation combinacao_8_elementos(A) {
//(2n-1): if cmp A n then goto (2n) else goto (2n+1)
//(2n)  : do add A (combinação(8,n) - n) goto 0

  1: if cmp A 1 then goto 2 else goto 3
  2: do add A 7 goto 0

  3: if cmp A 2 then goto 4 else goto 5
  4: do add A 26 goto 0

  5: if cmp A 3 then goto 6 else goto 7
  6: do add A 53 goto 0

  7: if cmp A 4 then goto 8 else goto 9
  8: do add A 66 goto 0

  9: if cmp A 5 then goto 10 else goto 11
  10: do add A 51 goto 0

  11: if cmp A 6 then goto 12 else goto 13
  12: do add A 22 goto 0

  13: if cmp A 7 then goto 14 else goto 15
  14: do add A 1 goto 0

  15: do clear(A) goto 16
  16: do inc A goto 0
}

//inutil, muitas multiplicações
operation combinacao(A,B,Y,C,D,E,F,G) {
  trivial: if zero B then goto only_one else goto trivial_1
  trivial_1: if le(A,B,C,D,E) then goto only_one else goto 1

  //Y=A*(A-1)*...*(B+1)
  1: do load(Y,A,E) goto 2
  2: do multiplica_de_A_a_B(Y,B,C,D,E,F,G) goto 3

  3: do load(C,B,E) goto 4
  4: do fatorial(C,D,E,F,G) goto 5

  5: do div(Y,C,D,E,F,G) goto 6

  6: do clear(C) goto 0

  only_one: do add Y 1 goto 0
}

//1: do trab_1_a(X,Y,B,C,D,E) goto 0
operation trab_1_a(X,Y,B,C,D,E) {
  1: do two_raised_x_div_2_ceil(X,Y,B,C,D,E) goto 0
}

//1: do trab_1_b(X,Y,A) goto 0
operation trab_1_b(X,Y,A) {
  1: do load(Y,X,A) goto 2
  2: do combinacao_8_elementos(Y) goto 0
}

//1: do trab_c(X,Y,A,B,C,D,E,F) goto 0
operation trab_1_c(X,Y,A,B,C,D,E,F) {
  1: if primo(X,A,B,C,D,E,F) then goto 2 else goto 0
  2: do inc Y goto 0
}

//1: do trab_1_d(X,Y,A,B,C,D) goto 0
operation trab_1_d(X,Y,A,B,C,D) {
  1: do add A 3 goto 2
  2: do load(Y,X,B) goto 3
  3: do mod(Y,A,B,C,D) goto 4
  4: do clear(A) goto 0
}

operation codifica(A,B,C,D,E,F) {
  1: do load(C,B,D) goto 2

  2: do mult_2(C,D) goto 3
  3: do inc C goto 4

  4: do times_fast_two_raised(A,D,E,F,C) goto 0
}

operation decodifica(A,B,C,D,E,F) {
  1: do fast_div_two_raised(C,D,E,A) goto 2

  2: do div_2(C,D,E) goto 3 

  3: do load_(B,C) goto 4

  4: do codifica(A,B,C,D,E,F) goto 0
}

main {
  5: do decodifica(A,B,X,D,E,F) goto 0
}